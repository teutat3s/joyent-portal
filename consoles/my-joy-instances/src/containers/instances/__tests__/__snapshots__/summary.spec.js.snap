// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders <Summary /> without throwing 1`] = `
.c3 {
  fill: rgb(59,70,204);
  stroke: rgb(59,70,204);
  -webkit-animation: iCqDak 1.5s ease-out 0s infinite;
  animation: iCqDak 1.5s ease-out 0s infinite;
}

.c4 {
  -webkit-animation-delay: 0.5s;
  animation-delay: 0.5s;
}

.c5 {
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
}

.c7 {
  color: rgb(73,73,73);
  margin: 0;
  line-height: 1.5rem;
  font-size: 0.9375rem;
  margin: 0;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 1.25rem;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.c6 {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  text-align: center;
}

.c1 {
  margin-right: auto;
  margin-left: auto;
}

.c0 {
  box-sizing: border-box;
  width: 100%;
  max-width: 78.75rem;
  padding-bottom: 1.125rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

@media only screen and (min-width:48em) {
  .c1 {
    width: 46rem;
  }
}

@media only screen and (min-width:64em) {
  .c1 {
    width: 56rem;
  }
}

@media only screen and (min-width:75em) {
  .c1 {
    width: 59rem;
  }
}

@media only screen and (max-width:37.4375rem) {
  .c0 {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }
}

@media only screen and (min-width:37.5rem) and (max-width:62.4375rem) {
  .c0 {
    padding-left: 1.875rem;
    padding-right: 1.875rem;
  }
}

@media only screen and (min-width:62.5rem) and (max-width:87.4375rem) {
  .c0 {
    padding-left: 4.375rem;
    padding-right: 4.375rem;
  }
}

<div
  className="c0 c1"
>
  <div
    className="c2"
  >
    <svg
      height="10"
      width="28"
    >
      <rect
        className="c3"
        height="6"
        width="6"
        x="2"
        y="2"
      />
      <rect
        className="c4 c3"
        height="6"
        width="6"
        x="11"
        y="2"
      />
      <rect
        className="c5 c3"
        height="6"
        width="6"
        x="20"
        y="2"
      />
    </svg>
    <p
      className="c6 c7"
    >
      Loading...
    </p>
  </div>
</div>
`;

exports[`renders <Summary loading /> without throwing 1`] = `
.c3 {
  fill: rgb(59,70,204);
  stroke: rgb(59,70,204);
  -webkit-animation: iCqDak 1.5s ease-out 0s infinite;
  animation: iCqDak 1.5s ease-out 0s infinite;
}

.c4 {
  -webkit-animation-delay: 0.5s;
  animation-delay: 0.5s;
}

.c5 {
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
}

.c7 {
  color: rgb(73,73,73);
  margin: 0;
  line-height: 1.5rem;
  font-size: 0.9375rem;
  margin: 0;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 1.25rem;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.c6 {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  text-align: center;
}

.c1 {
  margin-right: auto;
  margin-left: auto;
}

.c0 {
  box-sizing: border-box;
  width: 100%;
  max-width: 78.75rem;
  padding-bottom: 1.125rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

@media only screen and (min-width:48em) {
  .c1 {
    width: 46rem;
  }
}

@media only screen and (min-width:64em) {
  .c1 {
    width: 56rem;
  }
}

@media only screen and (min-width:75em) {
  .c1 {
    width: 59rem;
  }
}

@media only screen and (max-width:37.4375rem) {
  .c0 {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }
}

@media only screen and (min-width:37.5rem) and (max-width:62.4375rem) {
  .c0 {
    padding-left: 1.875rem;
    padding-right: 1.875rem;
  }
}

@media only screen and (min-width:62.5rem) and (max-width:87.4375rem) {
  .c0 {
    padding-left: 4.375rem;
    padding-right: 4.375rem;
  }
}

<div
  className="c0 c1"
>
  <div
    className="c2"
  >
    <svg
      height="10"
      width="28"
    >
      <rect
        className="c3"
        height="6"
        width="6"
        x="2"
        y="2"
      />
      <rect
        className="c4 c3"
        height="6"
        width="6"
        x="11"
        y="2"
      />
      <rect
        className="c5 c3"
        height="6"
        width="6"
        x="20"
        y="2"
      />
    </svg>
    <p
      className="c6 c7"
    >
      Loading...
    </p>
  </div>
</div>
`;

exports[`renders <Summary loadingError /> without throwing 1`] = `
.c2 {
  margin-bottom: 1.875rem;
}

.c8 {
  color: rgb(73,73,73);
  margin: 0;
  line-height: 1.5rem;
  font-size: 0.9375rem;
  margin: 0;
}

.c1 {
  margin-right: auto;
  margin-left: auto;
}

.c0 {
  box-sizing: border-box;
  width: 100%;
  max-width: 78.75rem;
  padding-bottom: 1.125rem;
}

.c6 {
  margin: 0;
  color: rgb(73,73,73);
  font-weight: 400;
  line-height: 1.5rem;
  font-size: 0.9375rem;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: rgb(255,255,255);
  box-shadow: 0 0.125rem 0 0 rgba(0,0,0,0.05);
  border: 0.0625rem solid rgb(216,216,216);
  border-radius: 0.1875rem;
  width: 100%;
}

.c4 {
  border-radius: 0.1875rem 0 0 0.1875rem;
  min-width: 0.75rem;
  background-color: rgb(0,152,88);
  background-color: rgb(210,67,58);
}

.c5 {
  padding: 1.125rem 1.125rem;
}

.c7 {
  line-height: 0.875rem;
  font-size: 0.8125rem;
}

@media only screen and (min-width:48em) {
  .c1 {
    width: 46rem;
  }
}

@media only screen and (min-width:64em) {
  .c1 {
    width: 56rem;
  }
}

@media only screen and (min-width:75em) {
  .c1 {
    width: 59rem;
  }
}

@media only screen and (max-width:37.4375rem) {
  .c0 {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }
}

@media only screen and (min-width:37.5rem) and (max-width:62.4375rem) {
  .c0 {
    padding-left: 1.875rem;
    padding-right: 1.875rem;
  }
}

@media only screen and (min-width:62.5rem) and (max-width:87.4375rem) {
  .c0 {
    padding-left: 4.375rem;
    padding-right: 4.375rem;
  }
}

<div
  className="c0 c1"
>
  <div
    className="c2"
  >
    <div
      className="c3"
    >
      <div
        className="c4"
      />
      <div
        className="c5"
      >
        <h4
          className="c6"
        >
          Ooops!
        </h4>
        <p
          className="c7 c8"
        >
          An error occurred while loading your instance summary
        </p>
      </div>
    </div>
  </div>
</div>
`;

exports[`renders <Summary mutationError /> without throwing 1`] = `
.c3 {
  fill: rgb(59,70,204);
  stroke: rgb(59,70,204);
  -webkit-animation: iCqDak 1.5s ease-out 0s infinite;
  animation: iCqDak 1.5s ease-out 0s infinite;
}

.c4 {
  -webkit-animation-delay: 0.5s;
  animation-delay: 0.5s;
}

.c5 {
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
}

.c7 {
  color: rgb(73,73,73);
  margin: 0;
  line-height: 1.5rem;
  font-size: 0.9375rem;
  margin: 0;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 1.25rem;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.c6 {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  text-align: center;
}

.c1 {
  margin-right: auto;
  margin-left: auto;
}

.c0 {
  box-sizing: border-box;
  width: 100%;
  max-width: 78.75rem;
  padding-bottom: 1.125rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c11 {
  margin: 0;
  color: rgb(73,73,73);
  font-weight: 400;
  line-height: 1.5rem;
  font-size: 0.9375rem;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: rgb(255,255,255);
  box-shadow: 0 0.125rem 0 0 rgba(0,0,0,0.05);
  border: 0.0625rem solid rgb(216,216,216);
  border-radius: 0.1875rem;
  width: 100%;
}

.c9 {
  border-radius: 0.1875rem 0 0 0.1875rem;
  min-width: 0.75rem;
  background-color: rgb(0,152,88);
  background-color: rgb(210,67,58);
}

.c10 {
  padding: 1.125rem 1.125rem;
}

.c12 {
  line-height: 0.875rem;
  font-size: 0.8125rem;
}

@media only screen and (min-width:48em) {
  .c1 {
    width: 46rem;
  }
}

@media only screen and (min-width:64em) {
  .c1 {
    width: 56rem;
  }
}

@media only screen and (min-width:75em) {
  .c1 {
    width: 59rem;
  }
}

@media only screen and (max-width:37.4375rem) {
  .c0 {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }
}

@media only screen and (min-width:37.5rem) and (max-width:62.4375rem) {
  .c0 {
    padding-left: 1.875rem;
    padding-right: 1.875rem;
  }
}

@media only screen and (min-width:62.5rem) and (max-width:87.4375rem) {
  .c0 {
    padding-left: 4.375rem;
    padding-right: 4.375rem;
  }
}

<div
  className="c0 c1"
>
  <div
    className="c2"
  >
    <svg
      height="10"
      width="28"
    >
      <rect
        className="c3"
        height="6"
        width="6"
        x="2"
        y="2"
      />
      <rect
        className="c4 c3"
        height="6"
        width="6"
        x="11"
        y="2"
      />
      <rect
        className="c5 c3"
        height="6"
        width="6"
        x="20"
        y="2"
      />
    </svg>
    <p
      className="c6 c7"
    >
      Loading...
    </p>
  </div>
  <div
    className="c8"
  >
    <div
      className="c9"
    />
    <div
      className="c10"
    >
      <h4
        className="c11"
      >
        Ooops!
      </h4>
      <p
        className="c12 c7"
      >
        some mutation error
      </p>
    </div>
  </div>
</div>
`;

exports[`renders <Summary starting stopping rebooting removing /> without throwing 1`] = `
.c3 {
  fill: rgb(59,70,204);
  stroke: rgb(59,70,204);
  -webkit-animation: iCqDak 1.5s ease-out 0s infinite;
  animation: iCqDak 1.5s ease-out 0s infinite;
}

.c4 {
  -webkit-animation-delay: 0.5s;
  animation-delay: 0.5s;
}

.c5 {
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
}

.c7 {
  color: rgb(73,73,73);
  margin: 0;
  line-height: 1.5rem;
  font-size: 0.9375rem;
  margin: 0;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 1.25rem;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.c6 {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  text-align: center;
}

.c1 {
  margin-right: auto;
  margin-left: auto;
}

.c0 {
  box-sizing: border-box;
  width: 100%;
  max-width: 78.75rem;
  padding-bottom: 1.125rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

@media only screen and (min-width:48em) {
  .c1 {
    width: 46rem;
  }
}

@media only screen and (min-width:64em) {
  .c1 {
    width: 56rem;
  }
}

@media only screen and (min-width:75em) {
  .c1 {
    width: 59rem;
  }
}

@media only screen and (max-width:37.4375rem) {
  .c0 {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }
}

@media only screen and (min-width:37.5rem) and (max-width:62.4375rem) {
  .c0 {
    padding-left: 1.875rem;
    padding-right: 1.875rem;
  }
}

@media only screen and (min-width:62.5rem) and (max-width:87.4375rem) {
  .c0 {
    padding-left: 4.375rem;
    padding-right: 4.375rem;
  }
}

<div
  className="c0 c1"
>
  <div
    className="c2"
  >
    <svg
      height="10"
      width="28"
    >
      <rect
        className="c3"
        height="6"
        width="6"
        x="2"
        y="2"
      />
      <rect
        className="c4 c3"
        height="6"
        width="6"
        x="11"
        y="2"
      />
      <rect
        className="c5 c3"
        height="6"
        width="6"
        x="20"
        y="2"
      />
    </svg>
    <p
      className="c6 c7"
    >
      Loading...
    </p>
  </div>
</div>
`;

exports[`renders <Summary starting stopping rebooting removing /> without throwing 2`] = `
.c9 {
  margin-bottom: 0.375rem;
}

.c14 {
  margin-left: 0.75rem;
}

.c15 {
  margin-top: 0.375rem;
  margin-bottom: 0.375rem;
}

.c21 {
  margin-top: 0.375rem;
}

.c23 {
  margin-top: 1.125rem;
}

.c27 {
  margin-right: 0.375rem;
}

.c33 {
  margin-right: 0.75rem;
}

.c43 {
  margin-top: 1.125rem;
  margin-bottom: 1.875rem;
}

.c45 {
  margin-bottom: 1.125rem;
}

.c47 {
  margin-bottom: 0.1875rem;
}

.c6 {
  padding: 1.875rem;
}

.c39 {
  background-color: transparent;
  -webkit-text-decoration-skip: objects;
  text-decoration-skip: objects;
}

.c32 {
  font-family: sans-serif;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
  overflow: visible;
  text-transform: none;
  -webkit-appearance: button;
  -moz-appearance: button;
  appearance: button;
}

.c32::-moz-focus-inner,
.c32[type='button']::-moz-focus-inner,
.c32[type='reset']::-moz-focus-inner,
.c32[type='submit']::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

.c32:-moz-focusring,
.c32[type='button']:-moz-focusring,
.c32[type='reset']:-moz-focusring,
.c32[type='submit']:-moz-focusring {
  outline: 0.0625rem dotted ButtonText;
}

.c38 {
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
}

.c37 {
  color: rgb(59,70,204);
  -webkit-text-fill-color: currentcolor;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
}

.c37:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c31 {
  min-width: 7.5rem;
}

.c30 {
  display: inline-block;
}

.c29 {
  box-sizing: border-box;
  display: inline-block;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 3rem;
  height: 3rem;
  min-width: 7.5rem;
  padding: 0.9375rem 1.125rem;
  position: relative;
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
  font-size: 0.9375rem;
  text-align: center;
  font-style: normal;
  font-stretch: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
  background-image: none;
  background-color: rgb(59,70,204);
  border-radius: 0.25rem;
  border: solid 0.0625rem rgb(45,56,132);
  color: rgb(70,70,70);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  font-weight: 500;
}

.c29:focus {
  outline: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgb(59,70,204);
  border-color: rgb(45,56,132);
}

.c29:hover {
  background-color: rgb(72,83,217);
  border-color: rgb(45,56,132);
}

.c29:active,
.c29:active:hover,
.c29:active:focus {
  background-image: none;
  outline: 0;
  background-color: rgb(45,56,132);
  border-color: rgb(45,56,132);
}

.c29[disabled] {
  cursor: not-allowed;
  pointer-events: none;
}

.c29:focus {
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c29:hover {
  background-color: rgb(247,247,247);
  border-color: rgb(216,216,216);
}

.c29:active,
.c29:active:hover,
.c29:active:focus {
  background-color: rgb(230,230,230);
  border-color: rgb(216,216,216);
}

.c35 {
  box-sizing: border-box;
  display: inline-block;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 3rem;
  height: 3rem;
  min-width: 7.5rem;
  padding: 0.9375rem 1.125rem;
  position: relative;
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
  font-size: 0.9375rem;
  text-align: center;
  font-style: normal;
  font-stretch: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
  background-image: none;
  background-color: rgb(59,70,204);
  border-radius: 0.25rem;
  border: solid 0.0625rem rgb(45,56,132);
  color: rgb(70,70,70);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c35:focus {
  outline: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgb(59,70,204);
  border-color: rgb(45,56,132);
}

.c35:hover {
  background-color: rgb(72,83,217);
  border-color: rgb(45,56,132);
}

.c35:active,
.c35:active:hover,
.c35:active:focus {
  background-image: none;
  outline: 0;
  background-color: rgb(45,56,132);
  border-color: rgb(45,56,132);
}

.c35[disabled] {
  cursor: not-allowed;
  pointer-events: none;
}

.c35:focus {
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c35:hover {
  background-color: rgb(247,247,247);
  border-color: rgb(216,216,216);
}

.c35:active,
.c35:active:hover,
.c35:active:focus {
  background-color: rgb(230,230,230);
  border-color: rgb(216,216,216);
}

.c41 {
  box-sizing: border-box;
  display: inline-block;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 3rem;
  height: 3rem;
  min-width: 7.5rem;
  padding: 0.9375rem 1.125rem;
  position: relative;
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
  font-size: 0.9375rem;
  text-align: center;
  font-style: normal;
  font-stretch: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
  background-image: none;
  background-color: rgb(59,70,204);
  border-radius: 0.25rem;
  border: solid 0.0625rem rgb(45,56,132);
  color: rgb(70,70,70);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
  color: rgb(210,67,58);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(210,67,58);
  padding: 0.625rem 1.125rem;
  font-size: 0.8125rem;
  min-width: 0rem;
  min-height: 0rem;
  height: auto;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  float: right;
}

.c41:focus {
  outline: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgb(59,70,204);
  border-color: rgb(45,56,132);
}

.c41:hover {
  background-color: rgb(72,83,217);
  border-color: rgb(45,56,132);
}

.c41:active,
.c41:active:hover,
.c41:active:focus {
  background-image: none;
  outline: 0;
  background-color: rgb(45,56,132);
  border-color: rgb(45,56,132);
}

.c41[disabled] {
  cursor: not-allowed;
  pointer-events: none;
}

.c41:focus {
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c41:hover {
  background-color: rgb(247,247,247);
  border-color: rgb(216,216,216);
}

.c41:active,
.c41:active:hover,
.c41:active:focus {
  background-color: rgb(230,230,230);
  border-color: rgb(216,216,216);
}

.c41:focus {
  color: rgb(205,37,27);
  background-color: rgb(255,255,255);
  border-color: rgb(205,37,27);
}

.c41:hover {
  color: rgb(205,37,27);
  background-color: rgb(255,255,255);
  border-color: rgb(205,37,27);
}

.c41:active,
.c41:active:hover,
.c41:active:focus {
  background-color: rgba(210,67,58,0.1);
  border-color: rgb(205,37,27);
}

.c42 {
  box-sizing: border-box;
  display: inline-block;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 3rem;
  height: 3rem;
  min-width: 7.5rem;
  padding: 0.9375rem 1.125rem;
  position: relative;
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
  font-size: 0.9375rem;
  text-align: center;
  font-style: normal;
  font-stretch: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
  background-image: none;
  background-color: rgb(59,70,204);
  border-radius: 0.25rem;
  border: solid 0.0625rem rgb(45,56,132);
  color: rgb(70,70,70);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
  color: rgb(210,67,58);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(210,67,58);
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  font-weight: 500;
  float: right;
}

.c42:focus {
  outline: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgb(59,70,204);
  border-color: rgb(45,56,132);
}

.c42:hover {
  background-color: rgb(72,83,217);
  border-color: rgb(45,56,132);
}

.c42:active,
.c42:active:hover,
.c42:active:focus {
  background-image: none;
  outline: 0;
  background-color: rgb(45,56,132);
  border-color: rgb(45,56,132);
}

.c42[disabled] {
  cursor: not-allowed;
  pointer-events: none;
}

.c42:focus {
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c42:hover {
  background-color: rgb(247,247,247);
  border-color: rgb(216,216,216);
}

.c42:active,
.c42:active:hover,
.c42:active:focus {
  background-color: rgb(230,230,230);
  border-color: rgb(216,216,216);
}

.c42:focus {
  color: rgb(205,37,27);
  background-color: rgb(255,255,255);
  border-color: rgb(205,37,27);
}

.c42:hover {
  color: rgb(205,37,27);
  background-color: rgb(255,255,255);
  border-color: rgb(205,37,27);
}

.c42:active,
.c42:active:hover,
.c42:active:focus {
  background-color: rgba(210,67,58,0.1);
  border-color: rgb(205,37,27);
}

.c20 {
  width: 0.9375rem;
  height: 0.9375rem;
  border-radius: 50%;
  background-color: rgb(0,152,88);
  display: inline-block;
  margin-right: 0.375rem;
  margin-left: 0rem;
}

.c34 {
  padding: 0;
  min-width: 2.9375rem;
  max-width: 2.9375rem;
  width: 2.9375rem;
}

.c36 {
  padding: 0.9375rem 1.125rem;
}

.c28 {
  display: inline-block;
}

.c28 [data-ui-button='true']:not(:first-child) {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  border-left: none;
}

.c28 [data-ui-button='true']:not(:last-child) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.c18 {
  font-size: 0.9375rem;
  line-height: 1.125rem;
  font-style: normal;
  font-stretch: normal;
  display: block;
  color: rgb(70,70,70);
  text-align: left;
}

.c1 {
  margin-right: auto;
  margin-left: auto;
}

.c2 {
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: -0.625rem;
  margin-left: -0.625rem;
}

.c7 {
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: -0.625rem;
  margin-left: -0.625rem;
}

.c24 {
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: -0.625rem;
  margin-left: -0.625rem;
}

.c3 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c8 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c25 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c40 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c46 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c0 {
  box-sizing: border-box;
  width: 100%;
  max-width: 78.75rem;
  padding-bottom: 1.125rem;
}

.c11 {
  margin: 0;
  color: rgb(73,73,73);
  font-weight: normal;
  line-height: 1.875rem;
  font-size: 1.5rem;
}

.c44 {
  height: 1px;
  background-color: rgb(216,216,216);
  height: 1;
}

.c4 {
  box-sizing: content-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  border-width: 0.0625rem;
  border-style: solid;
  -webkit-transition: all 300ms ease;
  transition: all 300ms ease;
  color: rgb(73,73,73);
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c5 {
  box-sizing: border-box;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  border-width: 0;
  background-color: transparent;
}

.c12 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  -webkit-align-content: stretch;
  -ms-flex-line-pack: stretch;
  align-content: stretch;
}

.c26 {
  -webkit-order: 0;
  -ms-flex-order: 0;
  order: 0;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 1;
  -ms-flex-negative: 1;
  flex-shrink: 1;
  display: block;
}

.c50 {
  box-sizing: border-box;
  width: 18.75rem;
  height: 3rem;
  min-height: 3rem;
  padding: 0.8125rem 0.75rem;
  border-radius: 0.25rem;
  background-color: rgb(255,255,255);
  border: 0.0625rem solid rgb(216,216,216);
  color: rgb(73,73,73);
  font-size: 0.9375rem;
  line-height: normal !important;
  font-style: normal;
  font-stretch: normal;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  outline: 0;
  font-family: "Roboto Mono",monospace;
  width: 100%;
  min-width: 100%;
}

.c50:focus {
  border-color: rgb(59,70,204);
  outline: 0;
}

.c50::-webkit-input-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50::-moz-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:-ms-input-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:invalid {
  box-shadow: none;
}

.c50:disabled {
  background-color: rgb(250,250,250);
  color: rgb(216,216,216);
  cursor: not-allowed;
}

.c50:disabled::-webkit-input-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:disabled::-moz-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:disabled:-ms-input-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:disabled {
  color: rgb(73,73,73);
}

.c50:disabled::-webkit-input-placeholder {
  color: rgb(73,73,73);
}

.c50:disabled::-moz-placeholder {
  color: rgb(73,73,73);
}

.c50:disabled:-ms-input-placeholder {
  color: rgb(73,73,73);
}

.c48 {
  font-weight: 600;
  white-space: pre;
  font-size: 0.8125rem;
}

.c49 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c49 input {
  padding-right: 1.875rem;
}

.c49 div {
  position: relative;
  left: -1.625rem;
}

.c51 {
  cursor: pointer;
}

.c17 {
  font-weight: 200;
}

.c22 {
  opacity: 0.5;
  padding-right: 0.1875rem;
}

.c16 {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c13 {
  cursor: pointer;
}

.c19 {
  width: 0.0625rem;
  background: rgb(216,216,216);
  height: 1.5rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-self: flex-end;
  -ms-flex-item-align: end;
  align-self: flex-end;
  margin: 0 0.75rem;
}

.c10 {
  margin: 0;
}

@media only screen and (min-width:48em) {
  .c1 {
    width: 46rem;
  }
}

@media only screen and (min-width:64em) {
  .c1 {
    width: 56rem;
  }
}

@media only screen and (min-width:75em) {
  .c1 {
    width: 59rem;
  }
}

@media only screen and (min-width:0em) {
  .c7 {
    -webkit-align-items: center;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
  }
}

@media only screen and (min-width:0em) {
  .c24 {
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
  }
}

@media only screen and (min-width:0em) {
  .c3 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media only screen and (min-width:48em) {
  .c3 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media only screen and (min-width:64em) {
  .c3 {
    -webkit-flex-basis: 75%;
    -ms-flex-preferred-size: 75%;
    flex-basis: 75%;
    max-width: 75%;
  }
}

@media only screen and (min-width:0em) {
  .c8 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media only screen and (min-width:0em) {
  .c25 {
    -webkit-flex-basis: 75%;
    -ms-flex-preferred-size: 75%;
    flex-basis: 75%;
    max-width: 75%;
  }
}

@media only screen and (min-width:0em) {
  .c40 {
    -webkit-flex-basis: 25%;
    -ms-flex-preferred-size: 25%;
    flex-basis: 25%;
    max-width: 25%;
  }
}

@media only screen and (min-width:0em) {
  .c46 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media only screen and (min-width:64em) {
  .c46 {
    -webkit-flex-basis: 58.333333333333336%;
    -ms-flex-preferred-size: 58.333333333333336%;
    flex-basis: 58.333333333333336%;
    max-width: 58.333333333333336%;
  }
}

@media only screen and (max-width:37.4375rem) {
  .c0 {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }
}

@media only screen and (min-width:37.5rem) and (max-width:62.4375rem) {
  .c0 {
    padding-left: 1.875rem;
    padding-right: 1.875rem;
  }
}

@media only screen and (min-width:62.5rem) and (max-width:87.4375rem) {
  .c0 {
    padding-left: 4.375rem;
    padding-right: 4.375rem;
  }
}

@media (max-width:37.4375rem) {
  .c19 {
    display: none;
  }
}

<div
  className="c0 c1"
>
  <div
    className="c2"
  >
    <div
      className="c3"
    >
      <div
        className="c4"
        disabled={false}
        name="card"
      >
        <div
          className="c5 c4"
          disabled={false}
          name="card-outlet"
        >
          <div
            className="c6"
          >
            <div
              className="c7"
            >
              <div
                className="c8"
              >
                <div
                  className="c9"
                >
                  <h2
                    className="c10 c11"
                  >
                    <div
                      className="c12"
                    >
                      <div
                        className="c13 c14"
                        onClick={undefined}
                      >
                        <svg
                          height="17.07"
                          viewBox="0 0 17.07 17.07"
                          width="17.07"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14,9.07v5a1,1,0,0,1-1,1H3a1,1,0,0,1-1-1v-10a1,1,0,0,1,1-1H8v-2H3c-2,0-3,1-3,3v10a2.65,2.65,0,0,0,3,3H13a2.65,2.65,0,0,0,3-3v-5ZM14.24,0,5.76,8.49,4.34,12.73l4.25-1.42,8.48-8.48ZM7.17,8.49l7.07-7.08,1.42,1.42L8.59,9.9Z"
                            fill="rgb(73, 73, 73)"
                          />
                        </svg>
                      </div>
                    </div>
                  </h2>
                </div>
              </div>
            </div>
            <div
              className="c15"
            >
              <div
                className="c12"
              >
                <label
                  className="c16 c17 c18"
                >
                  Alpine 3
                </label>
                <div
                  className="c19"
                />
                <label
                  className="c16 c17 c18"
                >
                  Hardware virtual machine
                </label>
                <div
                  className="c19"
                />
                <label
                  className="c16 c17 c18"
                >
                  g4-highcpu-128M
                </label>
                <div
                  className="c19"
                />
                <div
                  className="c12"
                >
                  <span
                    className="c20"
                    color="green"
                    size="0.9375rem"
                  />
                  Running
                </div>
              </div>
              <div
                className="c21"
              >
                <div
                  className="c12"
                >
                  <div
                    className="c12"
                  >
                    <label
                      className="c22 c17 c18"
                    >
                      Created: 
                    </label>
                    <label
                      className="c17 c18"
                    >
                       
                      almost NaN years
                       ago
                    </label>
                  </div>
                  <div
                    className="c19"
                  />
                  <div
                    className="c12"
                  >
                    <label
                      className="c22 c17 c18"
                    >
                      Updated: 
                    </label>
                    <label
                      className="c17 c18"
                    >
                       
                      almost NaN years
                       ago
                    </label>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c23"
            >
              <div
                className="c24"
              >
                <div
                  className="c25"
                >
                  <div
                    className="c12"
                  >
                    <div
                      className="c26"
                    >
                      <div
                        className="c27"
                      >
                        <span
                          className="c28"
                        >
                          <button
                            className="c29 c30 c31 c32"
                            data-ui-button="true"
                            disabled={false}
                            href=""
                            icon={true}
                            onClick={[Function]}
                            type="button"
                          >
                            <div
                              className="c33"
                            >
                              <svg
                                height="14"
                                style={
                                  Object {
                                    "transform": "rotate(0deg)",
                                  }
                                }
                                viewBox="0 0 14 14"
                                width="14"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M10.75,1.75a1.5,1.5,0,0,1,1.5,1.5v7.5a1.5,1.5,0,0,1-1.5,1.5H3.25a1.5,1.5,0,0,1-1.5-1.5V3.25a1.5,1.5,0,0,1,1.5-1.5h7.5m0-1.75H3.25A3.26,3.26,0,0,0,0,3.25v7.5A3.26,3.26,0,0,0,3.25,14h7.5A3.26,3.26,0,0,0,14,10.75V3.25A3.26,3.26,0,0,0,10.75,0Z"
                                  fill="rgb(73, 73, 73)"
                                />
                              </svg>
                            </div>
                            <span>
                              Stop
                            </span>
                          </button>
                          <button
                            className="c34 c35 c30 c31 c32"
                            data-ui-button="true"
                            href=""
                          >
                            <div
                              box={false}
                              className=""
                              onClick={[Function]}
                              onMouseEnter={undefined}
                              onMouseLeave={undefined}
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                              tag={false}
                            >
                              <div
                                className="c36"
                              >
                                <svg
                                  height="6"
                                  style={
                                    Object {
                                      "transform": "rotate(0deg)",
                                    }
                                  }
                                  viewBox="0 0 9.6 6"
                                  width="9.6"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M9.6,1.12,8.24,0,4.8,3.5,1.36,0,0,1.12,4.8,6Z"
                                    fill="rgb(73, 73, 73)"
                                  />
                                </svg>
                              </div>
                            </div>
                          </button>
                        </span>
                      </div>
                    </div>
                    <div
                      className="c26"
                    >
                      <a
                        className="c29 c30 c37 c38 c39"
                        data-ui-button="true"
                        href="http://localhost/images/~create/2252839a-e698-ceec-afac-9549ad0c6624"
                        icon={true}
                        rel="noopener noreferrer"
                        target="__blank"
                      >
                        Create Image
                      </a>
                    </div>
                  </div>
                </div>
                <div
                  className="c40"
                >
                  <span
                    name="react-responsive-mock"
                    query="only screen and (max-width: 37.4375rem)"
                  >
                    <button
                      className="c41 c30 c31 c32"
                      data-ui-button="true"
                      disabled={false}
                      href=""
                      icon={true}
                      onClick={[Function]}
                      type="button"
                    >
                      <div
                        className="c33"
                      >
                        <svg
                          height="16"
                          style={
                            Object {
                              "transform": "rotate(0deg)",
                            }
                          }
                          viewBox="0 0 12 16"
                          width="12"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M2.67,0V1.5H0V3H12V1.5H9.33V0ZM0,4,1.33,16h9.34L12,4ZM8,5h2.51l-1,10H8ZM1.49,5H4V15H2.53ZM7,15H5V5H7Z"
                            fill="rgb(210, 67, 58)"
                          />
                        </svg>
                      </div>
                    </button>
                  </span>
                  <span
                    name="react-responsive-mock"
                    query="only screen and (min-width: 37.5rem)"
                  >
                    <button
                      className="c42 c30 c31 c32"
                      data-ui-button="true"
                      disabled={false}
                      href=""
                      icon={true}
                      onClick={[Function]}
                      type="button"
                    >
                      <div
                        className="c33"
                      >
                        <svg
                          height="16"
                          style={
                            Object {
                              "transform": "rotate(0deg)",
                            }
                          }
                          viewBox="0 0 12 16"
                          width="12"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M2.67,0V1.5H0V3H12V1.5H9.33V0ZM0,4,1.33,16h9.34L12,4ZM8,5h2.51l-1,10H8ZM1.49,5H4V15H2.53ZM7,15H5V5H7Z"
                            fill="rgb(210, 67, 58)"
                          />
                        </svg>
                      </div>
                      <span>
                        Delete
                      </span>
                    </button>
                  </span>
                </div>
              </div>
            </div>
            <div
              className="c43"
            >
              <div
                className="c44 c2"
                height={1}
              />
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Short ID
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="2252839a"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      ID
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="2252839a-e698-ceec-afac-9549ad0c6624"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      CN UUID
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="70bb1cee-dba3-11e3-a799-002590e4f2b0"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Image UUID
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="19aa3328-0025-11e7-a19a-c39077bfd4cf"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Login
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="ssh root@72.2.119.146"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Public IP address 1
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="72.2.119.146"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Public IP address 2
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="72.2.119.146"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Private IP address 1
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="10.112.5.63"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Private IP address 2
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="10.112.5.63"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`renders <Summary starting stopping rebooting removing /> without throwing 3`] = `
.c9 {
  margin-bottom: 0.375rem;
}

.c14 {
  margin-left: 0.75rem;
}

.c15 {
  margin-top: 0.375rem;
  margin-bottom: 0.375rem;
}

.c21 {
  margin-top: 0.375rem;
}

.c23 {
  margin-top: 1.125rem;
}

.c27 {
  margin-right: 0.375rem;
}

.c33 {
  margin-right: 0.75rem;
}

.c43 {
  margin-top: 1.125rem;
  margin-bottom: 1.875rem;
}

.c45 {
  margin-bottom: 1.125rem;
}

.c47 {
  margin-bottom: 0.1875rem;
}

.c6 {
  padding: 1.875rem;
}

.c39 {
  background-color: transparent;
  -webkit-text-decoration-skip: objects;
  text-decoration-skip: objects;
}

.c32 {
  font-family: sans-serif;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
  overflow: visible;
  text-transform: none;
  -webkit-appearance: button;
  -moz-appearance: button;
  appearance: button;
}

.c32::-moz-focus-inner,
.c32[type='button']::-moz-focus-inner,
.c32[type='reset']::-moz-focus-inner,
.c32[type='submit']::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

.c32:-moz-focusring,
.c32[type='button']:-moz-focusring,
.c32[type='reset']:-moz-focusring,
.c32[type='submit']:-moz-focusring {
  outline: 0.0625rem dotted ButtonText;
}

.c38 {
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
}

.c37 {
  color: rgb(59,70,204);
  -webkit-text-fill-color: currentcolor;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
}

.c37:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c31 {
  min-width: 7.5rem;
}

.c30 {
  display: inline-block;
}

.c29 {
  box-sizing: border-box;
  display: inline-block;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 3rem;
  height: 3rem;
  min-width: 7.5rem;
  padding: 0.9375rem 1.125rem;
  position: relative;
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
  font-size: 0.9375rem;
  text-align: center;
  font-style: normal;
  font-stretch: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
  background-image: none;
  background-color: rgb(59,70,204);
  border-radius: 0.25rem;
  border: solid 0.0625rem rgb(45,56,132);
  color: rgb(70,70,70);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  font-weight: 500;
}

.c29:focus {
  outline: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgb(59,70,204);
  border-color: rgb(45,56,132);
}

.c29:hover {
  background-color: rgb(72,83,217);
  border-color: rgb(45,56,132);
}

.c29:active,
.c29:active:hover,
.c29:active:focus {
  background-image: none;
  outline: 0;
  background-color: rgb(45,56,132);
  border-color: rgb(45,56,132);
}

.c29[disabled] {
  cursor: not-allowed;
  pointer-events: none;
}

.c29:focus {
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c29:hover {
  background-color: rgb(247,247,247);
  border-color: rgb(216,216,216);
}

.c29:active,
.c29:active:hover,
.c29:active:focus {
  background-color: rgb(230,230,230);
  border-color: rgb(216,216,216);
}

.c35 {
  box-sizing: border-box;
  display: inline-block;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 3rem;
  height: 3rem;
  min-width: 7.5rem;
  padding: 0.9375rem 1.125rem;
  position: relative;
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
  font-size: 0.9375rem;
  text-align: center;
  font-style: normal;
  font-stretch: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
  background-image: none;
  background-color: rgb(59,70,204);
  border-radius: 0.25rem;
  border: solid 0.0625rem rgb(45,56,132);
  color: rgb(70,70,70);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c35:focus {
  outline: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgb(59,70,204);
  border-color: rgb(45,56,132);
}

.c35:hover {
  background-color: rgb(72,83,217);
  border-color: rgb(45,56,132);
}

.c35:active,
.c35:active:hover,
.c35:active:focus {
  background-image: none;
  outline: 0;
  background-color: rgb(45,56,132);
  border-color: rgb(45,56,132);
}

.c35[disabled] {
  cursor: not-allowed;
  pointer-events: none;
}

.c35:focus {
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c35:hover {
  background-color: rgb(247,247,247);
  border-color: rgb(216,216,216);
}

.c35:active,
.c35:active:hover,
.c35:active:focus {
  background-color: rgb(230,230,230);
  border-color: rgb(216,216,216);
}

.c41 {
  box-sizing: border-box;
  display: inline-block;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 3rem;
  height: 3rem;
  min-width: 7.5rem;
  padding: 0.9375rem 1.125rem;
  position: relative;
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
  font-size: 0.9375rem;
  text-align: center;
  font-style: normal;
  font-stretch: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
  background-image: none;
  background-color: rgb(59,70,204);
  border-radius: 0.25rem;
  border: solid 0.0625rem rgb(45,56,132);
  color: rgb(70,70,70);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
  color: rgb(210,67,58);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(210,67,58);
  padding: 0.625rem 1.125rem;
  font-size: 0.8125rem;
  min-width: 0rem;
  min-height: 0rem;
  height: auto;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  float: right;
}

.c41:focus {
  outline: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgb(59,70,204);
  border-color: rgb(45,56,132);
}

.c41:hover {
  background-color: rgb(72,83,217);
  border-color: rgb(45,56,132);
}

.c41:active,
.c41:active:hover,
.c41:active:focus {
  background-image: none;
  outline: 0;
  background-color: rgb(45,56,132);
  border-color: rgb(45,56,132);
}

.c41[disabled] {
  cursor: not-allowed;
  pointer-events: none;
}

.c41:focus {
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c41:hover {
  background-color: rgb(247,247,247);
  border-color: rgb(216,216,216);
}

.c41:active,
.c41:active:hover,
.c41:active:focus {
  background-color: rgb(230,230,230);
  border-color: rgb(216,216,216);
}

.c41:focus {
  color: rgb(205,37,27);
  background-color: rgb(255,255,255);
  border-color: rgb(205,37,27);
}

.c41:hover {
  color: rgb(205,37,27);
  background-color: rgb(255,255,255);
  border-color: rgb(205,37,27);
}

.c41:active,
.c41:active:hover,
.c41:active:focus {
  background-color: rgba(210,67,58,0.1);
  border-color: rgb(205,37,27);
}

.c42 {
  box-sizing: border-box;
  display: inline-block;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 3rem;
  height: 3rem;
  min-width: 7.5rem;
  padding: 0.9375rem 1.125rem;
  position: relative;
  font-family: "Libre Franklin",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif;
  font-size: 0.9375rem;
  text-align: center;
  font-style: normal;
  font-stretch: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  color: rgb(255,255,255);
  -webkit-text-fill-color: currentcolor;
  background-image: none;
  background-color: rgb(59,70,204);
  border-radius: 0.25rem;
  border: solid 0.0625rem rgb(45,56,132);
  color: rgb(70,70,70);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
  color: rgb(210,67,58);
  -webkit-text-fill-color: currentcolor;
  background-color: rgb(255,255,255);
  border-color: rgb(210,67,58);
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  font-weight: 500;
  float: right;
}

.c42:focus {
  outline: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgb(59,70,204);
  border-color: rgb(45,56,132);
}

.c42:hover {
  background-color: rgb(72,83,217);
  border-color: rgb(45,56,132);
}

.c42:active,
.c42:active:hover,
.c42:active:focus {
  background-image: none;
  outline: 0;
  background-color: rgb(45,56,132);
  border-color: rgb(45,56,132);
}

.c42[disabled] {
  cursor: not-allowed;
  pointer-events: none;
}

.c42:focus {
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c42:hover {
  background-color: rgb(247,247,247);
  border-color: rgb(216,216,216);
}

.c42:active,
.c42:active:hover,
.c42:active:focus {
  background-color: rgb(230,230,230);
  border-color: rgb(216,216,216);
}

.c42:focus {
  color: rgb(205,37,27);
  background-color: rgb(255,255,255);
  border-color: rgb(205,37,27);
}

.c42:hover {
  color: rgb(205,37,27);
  background-color: rgb(255,255,255);
  border-color: rgb(205,37,27);
}

.c42:active,
.c42:active:hover,
.c42:active:focus {
  background-color: rgba(210,67,58,0.1);
  border-color: rgb(205,37,27);
}

.c20 {
  width: 0.9375rem;
  height: 0.9375rem;
  border-radius: 50%;
  background-color: rgb(0,152,88);
  display: inline-block;
  margin-right: 0.375rem;
  margin-left: 0rem;
}

.c34 {
  padding: 0;
  min-width: 2.9375rem;
  max-width: 2.9375rem;
  width: 2.9375rem;
}

.c36 {
  padding: 0.9375rem 1.125rem;
}

.c28 {
  display: inline-block;
}

.c28 [data-ui-button='true']:not(:first-child) {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  border-left: none;
}

.c28 [data-ui-button='true']:not(:last-child) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.c18 {
  font-size: 0.9375rem;
  line-height: 1.125rem;
  font-style: normal;
  font-stretch: normal;
  display: block;
  color: rgb(70,70,70);
  text-align: left;
}

.c1 {
  margin-right: auto;
  margin-left: auto;
}

.c2 {
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: -0.625rem;
  margin-left: -0.625rem;
}

.c7 {
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: -0.625rem;
  margin-left: -0.625rem;
}

.c24 {
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: -0.625rem;
  margin-left: -0.625rem;
}

.c3 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c8 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c25 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c40 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c46 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 0.625rem;
  padding-left: 0.625rem;
  display: block;
}

.c0 {
  box-sizing: border-box;
  width: 100%;
  max-width: 78.75rem;
  padding-bottom: 1.125rem;
}

.c11 {
  margin: 0;
  color: rgb(73,73,73);
  font-weight: normal;
  line-height: 1.875rem;
  font-size: 1.5rem;
}

.c44 {
  height: 1px;
  background-color: rgb(216,216,216);
  height: 1;
}

.c4 {
  box-sizing: content-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  border-width: 0.0625rem;
  border-style: solid;
  -webkit-transition: all 300ms ease;
  transition: all 300ms ease;
  color: rgb(73,73,73);
  background-color: rgb(255,255,255);
  border-color: rgb(216,216,216);
}

.c5 {
  box-sizing: border-box;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  border-width: 0;
  background-color: transparent;
}

.c12 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  -webkit-align-content: stretch;
  -ms-flex-line-pack: stretch;
  align-content: stretch;
}

.c26 {
  -webkit-order: 0;
  -ms-flex-order: 0;
  order: 0;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 1;
  -ms-flex-negative: 1;
  flex-shrink: 1;
  display: block;
}

.c50 {
  box-sizing: border-box;
  width: 18.75rem;
  height: 3rem;
  min-height: 3rem;
  padding: 0.8125rem 0.75rem;
  border-radius: 0.25rem;
  background-color: rgb(255,255,255);
  border: 0.0625rem solid rgb(216,216,216);
  color: rgb(73,73,73);
  font-size: 0.9375rem;
  line-height: normal !important;
  font-style: normal;
  font-stretch: normal;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  outline: 0;
  font-family: "Roboto Mono",monospace;
  width: 100%;
  min-width: 100%;
}

.c50:focus {
  border-color: rgb(59,70,204);
  outline: 0;
}

.c50::-webkit-input-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50::-moz-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:-ms-input-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:invalid {
  box-shadow: none;
}

.c50:disabled {
  background-color: rgb(250,250,250);
  color: rgb(216,216,216);
  cursor: not-allowed;
}

.c50:disabled::-webkit-input-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:disabled::-moz-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:disabled:-ms-input-placeholder {
  color: rgba(73,73,73,0.5);
}

.c50:disabled {
  color: rgb(73,73,73);
}

.c50:disabled::-webkit-input-placeholder {
  color: rgb(73,73,73);
}

.c50:disabled::-moz-placeholder {
  color: rgb(73,73,73);
}

.c50:disabled:-ms-input-placeholder {
  color: rgb(73,73,73);
}

.c48 {
  font-weight: 600;
  white-space: pre;
  font-size: 0.8125rem;
}

.c49 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c49 input {
  padding-right: 1.875rem;
}

.c49 div {
  position: relative;
  left: -1.625rem;
}

.c51 {
  cursor: pointer;
}

.c17 {
  font-weight: 200;
}

.c22 {
  opacity: 0.5;
  padding-right: 0.1875rem;
}

.c16 {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c13 {
  cursor: pointer;
}

.c19 {
  width: 0.0625rem;
  background: rgb(216,216,216);
  height: 1.5rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-self: flex-end;
  -ms-flex-item-align: end;
  align-self: flex-end;
  margin: 0 0.75rem;
}

.c10 {
  margin: 0;
}

@media only screen and (min-width:48em) {
  .c1 {
    width: 46rem;
  }
}

@media only screen and (min-width:64em) {
  .c1 {
    width: 56rem;
  }
}

@media only screen and (min-width:75em) {
  .c1 {
    width: 59rem;
  }
}

@media only screen and (min-width:0em) {
  .c7 {
    -webkit-align-items: center;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
  }
}

@media only screen and (min-width:0em) {
  .c24 {
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
  }
}

@media only screen and (min-width:0em) {
  .c3 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media only screen and (min-width:48em) {
  .c3 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media only screen and (min-width:64em) {
  .c3 {
    -webkit-flex-basis: 75%;
    -ms-flex-preferred-size: 75%;
    flex-basis: 75%;
    max-width: 75%;
  }
}

@media only screen and (min-width:0em) {
  .c8 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media only screen and (min-width:0em) {
  .c25 {
    -webkit-flex-basis: 75%;
    -ms-flex-preferred-size: 75%;
    flex-basis: 75%;
    max-width: 75%;
  }
}

@media only screen and (min-width:0em) {
  .c40 {
    -webkit-flex-basis: 25%;
    -ms-flex-preferred-size: 25%;
    flex-basis: 25%;
    max-width: 25%;
  }
}

@media only screen and (min-width:0em) {
  .c46 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media only screen and (min-width:64em) {
  .c46 {
    -webkit-flex-basis: 58.333333333333336%;
    -ms-flex-preferred-size: 58.333333333333336%;
    flex-basis: 58.333333333333336%;
    max-width: 58.333333333333336%;
  }
}

@media only screen and (max-width:37.4375rem) {
  .c0 {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }
}

@media only screen and (min-width:37.5rem) and (max-width:62.4375rem) {
  .c0 {
    padding-left: 1.875rem;
    padding-right: 1.875rem;
  }
}

@media only screen and (min-width:62.5rem) and (max-width:87.4375rem) {
  .c0 {
    padding-left: 4.375rem;
    padding-right: 4.375rem;
  }
}

@media (max-width:37.4375rem) {
  .c19 {
    display: none;
  }
}

<div
  className="c0 c1"
>
  <div
    className="c2"
  >
    <div
      className="c3"
    >
      <div
        className="c4"
        disabled={false}
        name="card"
      >
        <div
          className="c5 c4"
          disabled={false}
          name="card-outlet"
        >
          <div
            className="c6"
          >
            <div
              className="c7"
            >
              <div
                className="c8"
              >
                <div
                  className="c9"
                >
                  <h2
                    className="c10 c11"
                  >
                    <div
                      className="c12"
                    >
                      <div
                        className="c13 c14"
                        onClick={undefined}
                      >
                        <svg
                          height="17.07"
                          viewBox="0 0 17.07 17.07"
                          width="17.07"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14,9.07v5a1,1,0,0,1-1,1H3a1,1,0,0,1-1-1v-10a1,1,0,0,1,1-1H8v-2H3c-2,0-3,1-3,3v10a2.65,2.65,0,0,0,3,3H13a2.65,2.65,0,0,0,3-3v-5ZM14.24,0,5.76,8.49,4.34,12.73l4.25-1.42,8.48-8.48ZM7.17,8.49l7.07-7.08,1.42,1.42L8.59,9.9Z"
                            fill="rgb(73, 73, 73)"
                          />
                        </svg>
                      </div>
                    </div>
                  </h2>
                </div>
              </div>
            </div>
            <div
              className="c15"
            >
              <div
                className="c12"
              >
                <label
                  className="c16 c17 c18"
                >
                  Custom Image
                </label>
                <div
                  className="c19"
                />
                <label
                  className="c16 c17 c18"
                >
                  Infrastructure container
                </label>
                <div
                  className="c19"
                />
                <label
                  className="c16 c17 c18"
                >
                  g4-highcpu-128M
                </label>
                <div
                  className="c19"
                />
                <div
                  className="c12"
                >
                  <span
                    className="c20"
                    color="green"
                    size="0.9375rem"
                  />
                  Running
                </div>
              </div>
              <div
                className="c21"
              >
                <div
                  className="c12"
                >
                  <div
                    className="c12"
                  >
                    <label
                      className="c22 c17 c18"
                    >
                      Created: 
                    </label>
                    <label
                      className="c17 c18"
                    >
                       
                      almost NaN years
                       ago
                    </label>
                  </div>
                  <div
                    className="c19"
                  />
                  <div
                    className="c12"
                  >
                    <label
                      className="c22 c17 c18"
                    >
                      Updated: 
                    </label>
                    <label
                      className="c17 c18"
                    >
                       
                      almost NaN years
                       ago
                    </label>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c23"
            >
              <div
                className="c24"
              >
                <div
                  className="c25"
                >
                  <div
                    className="c12"
                  >
                    <div
                      className="c26"
                    >
                      <div
                        className="c27"
                      >
                        <span
                          className="c28"
                        >
                          <button
                            className="c29 c30 c31 c32"
                            data-ui-button="true"
                            disabled={false}
                            href=""
                            icon={true}
                            onClick={[Function]}
                            type="button"
                          >
                            <div
                              className="c33"
                            >
                              <svg
                                height="14"
                                style={
                                  Object {
                                    "transform": "rotate(0deg)",
                                  }
                                }
                                viewBox="0 0 14 14"
                                width="14"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M10.75,1.75a1.5,1.5,0,0,1,1.5,1.5v7.5a1.5,1.5,0,0,1-1.5,1.5H3.25a1.5,1.5,0,0,1-1.5-1.5V3.25a1.5,1.5,0,0,1,1.5-1.5h7.5m0-1.75H3.25A3.26,3.26,0,0,0,0,3.25v7.5A3.26,3.26,0,0,0,3.25,14h7.5A3.26,3.26,0,0,0,14,10.75V3.25A3.26,3.26,0,0,0,10.75,0Z"
                                  fill="rgb(73, 73, 73)"
                                />
                              </svg>
                            </div>
                            <span>
                              Stop
                            </span>
                          </button>
                          <button
                            className="c34 c35 c30 c31 c32"
                            data-ui-button="true"
                            href=""
                          >
                            <div
                              box={false}
                              className=""
                              onClick={[Function]}
                              onMouseEnter={undefined}
                              onMouseLeave={undefined}
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                              tag={false}
                            >
                              <div
                                className="c36"
                              >
                                <svg
                                  height="6"
                                  style={
                                    Object {
                                      "transform": "rotate(0deg)",
                                    }
                                  }
                                  viewBox="0 0 9.6 6"
                                  width="9.6"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M9.6,1.12,8.24,0,4.8,3.5,1.36,0,0,1.12,4.8,6Z"
                                    fill="rgb(73, 73, 73)"
                                  />
                                </svg>
                              </div>
                            </div>
                          </button>
                        </span>
                      </div>
                    </div>
                    <div
                      className="c26"
                    >
                      <a
                        className="c29 c30 c37 c38 c39"
                        data-ui-button="true"
                        href="http://localhost/images/~create/2252839a-e698-ceec-afac-9549ad0c6624"
                        icon={true}
                        rel="noopener noreferrer"
                        target="__blank"
                      >
                        Create Image
                      </a>
                    </div>
                  </div>
                </div>
                <div
                  className="c40"
                >
                  <span
                    name="react-responsive-mock"
                    query="only screen and (max-width: 37.4375rem)"
                  >
                    <button
                      className="c41 c30 c31 c32"
                      data-ui-button="true"
                      disabled={false}
                      href=""
                      icon={true}
                      onClick={[Function]}
                      type="button"
                    >
                      <div
                        className="c33"
                      >
                        <svg
                          height="16"
                          style={
                            Object {
                              "transform": "rotate(0deg)",
                            }
                          }
                          viewBox="0 0 12 16"
                          width="12"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M2.67,0V1.5H0V3H12V1.5H9.33V0ZM0,4,1.33,16h9.34L12,4ZM8,5h2.51l-1,10H8ZM1.49,5H4V15H2.53ZM7,15H5V5H7Z"
                            fill="rgb(210, 67, 58)"
                          />
                        </svg>
                      </div>
                    </button>
                  </span>
                  <span
                    name="react-responsive-mock"
                    query="only screen and (min-width: 37.5rem)"
                  >
                    <button
                      className="c42 c30 c31 c32"
                      data-ui-button="true"
                      disabled={false}
                      href=""
                      icon={true}
                      onClick={[Function]}
                      type="button"
                    >
                      <div
                        className="c33"
                      >
                        <svg
                          height="16"
                          style={
                            Object {
                              "transform": "rotate(0deg)",
                            }
                          }
                          viewBox="0 0 12 16"
                          width="12"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M2.67,0V1.5H0V3H12V1.5H9.33V0ZM0,4,1.33,16h9.34L12,4ZM8,5h2.51l-1,10H8ZM1.49,5H4V15H2.53ZM7,15H5V5H7Z"
                            fill="rgb(210, 67, 58)"
                          />
                        </svg>
                      </div>
                      <span>
                        Delete
                      </span>
                    </button>
                  </span>
                </div>
              </div>
            </div>
            <div
              className="c43"
            >
              <div
                className="c44 c2"
                height={1}
              />
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Short ID
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="2252839a"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      ID
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="2252839a-e698-ceec-afac-9549ad0c6624"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      CN UUID
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="70bb1cee-dba3-11e3-a799-002590e4f2b0"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Image UUID
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="19aa3328-0025-11e7-a19a-c39077bfd4cf"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Login
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="ssh root@72.2.119.146"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Public IP address 1
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="72.2.119.146"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Public IP address 2
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="72.2.119.146"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Private IP address 1
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="10.112.5.63"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className="c45"
            >
              <div
                className="c2"
              >
                <div
                  className="c46"
                >
                  <div
                    className="c47"
                  >
                    <label
                      className="c48 c18"
                      htmlFor=""
                    >
                      Private IP address 2
                    </label>
                  </div>
                  <div
                    className="c49"
                  >
                    <input
                      className="c50"
                      disabled={false}
                      id=""
                      onBlur={null}
                      value="10.112.5.63"
                    />
                    <div
                      onClick={undefined}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <svg
                        className="c51"
                        height="19"
                        innerRef={undefined}
                        onClick={[Function]}
                        style={
                          Object {
                            "transform": "rotate(0deg)",
                          }
                        }
                        viewBox="0 0 15 19"
                        width="15"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5,12l2-2v9H8V10l2,2,1-1L7.5,8,4,11ZM11,1h2a2.15,2.15,0,0,1,2,2V16a2.15,2.15,0,0,1-2,2H10V16h3V3H11V5H4V3H2V16H5v2H2a2.15,2.15,0,0,1-2-2V3A2.15,2.15,0,0,1,2,1H4V0h7ZM9,2H6V3H9V2Z"
                          fill="rgb(73, 73, 73)"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;
